#!/usr/bin/env python

import rospy
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from geometry_msgs.msg import Twist, Point
import math
import time

roll = pitch = yaw = xp = yp = xv = zv = 0.0

poles = [2,2],[3,4],[0,6]

start = time.time()



def get_rotation(msg):
    global roll, pitch, yaw, xp, yp, xv, zv
    orientation_q = msg.pose.pose.orientation
    orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
    (roll, pitch, yaw) = euler_from_quaternion (orientation_list)
    xp = msg.pose.pose.position.x
    yp = msg.pose.pose.position.y 
    xv = msg.twist.twist.linear.x
    zv = msg.twist.twist.angular.z


rospy.init_node('path_robot')

sub = rospy.Subscriber ('/odom', Odometry, get_rotation)
pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

move = Twist()


def moveto(poles):
    i = 0
    w = 0.25
    kp = 0.6
    kd = 0.4
    r = rospy.Rate(20)

    ctrl = True

    while not rospy.is_shutdown():


        while i < (len(poles) - 1):
            v1 = [poles[i][0] - xp, poles[i][1] - yp]
            v2 = [w * (poles[i+1][0] - xp), w * (poles[i+1][1] - yp)]

            print(" V1={} V2:{}", v1,v2)

            rx = v1[0] + v2[0]
            ry = v1[1] + v2[1]

            target = math.atan2(ry, rx)
            move.angular.z = (6 * (target-yaw)) - (2 * zv)
            move.linear.x = (kp * math.sqrt((v1[0]*v1[0]) + (v1[1]*v1[1]))) - (kd * xv)

            if (v1[0]*v1[0]) + (v1[1]*v1[1]) < (v2[0]*v2[0]) + (v2[1]*v2[1]):
                i = i + 1
            
            pub.publish(move)
        
        
        vL = [poles[len(poles) -  1 ][0] - xp, poles[len(poles) - 1][1] - yp]
        target = math.atan2(vL[1], vL[0])
        move.angular.z = (6 * (target-yaw)) - (3 * zv)
        move.linear.x = (kp * math.sqrt((vL[0]*vL[0]) + (vL[1]*vL[1]))) - (kd * xv)
        pub.publish(move)

        r.sleep


moveto(poles)
